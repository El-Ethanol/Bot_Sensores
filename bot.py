import logging, os, signal, time
from typing import Text
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext.messagehandler import MessageHandler  
from Auxiliares import Medidas
Token = "1856897280:AAG-X-LqbFDk16PC9YVtm3jtpwPaAR76e44"

logging.basicConfig(format='%(asctime)s-%(name)s-%(levelname)s-%(message)s', level=logging.INFO)
logger = logging.getLogger('SensoresICNBot')

a = 'Temperatura135.txt'
b = 'TemperaturaM.txt'
c = 'Presion.csv'
door = False

def refrescar():
    global d1, d2, d3, d4, c5, c6, ca, cb, pf, now
    logger.info('RefresquÃ©')
    meds = Medidas(a,b,c)
    d1, d2, d3, d4, c5, c6, ca, cb, pf = meds
    now=time.strftime("%X")

def start(update,context):
    logger.info('He recibido un comando start')
    name = update.effective_chat.first_name
    text = "Â¡Hola, " + name + "! ðŸ‘‹ðŸ‘‹ðŸ‘‹\n\nSoy el bot ðŸ¤– del Lab. de Detectores del ICN.\
           \n\nTe puedo dar las Ãºltimas mediciones de los sensores de temperatura y de presiÃ³n."
    chat_id = update.effective_chat.id
    keyboard(chat_id, text, context)
    
def keyboard(chat_id, text, context):
    kb = [[KeyboardButton("/mediciones")], [KeyboardButton("/temperatura")], [KeyboardButton("/presion")],
          [KeyboardButton("/help"), KeyboardButton("/config")], [KeyboardButton("/kill")]]
    kb1 = ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)
    context.bot.send_message(chat_id, text, reply_markup=kb1)
    
def stop(update,context):
    logger.info('He recibido un comando stop')
    name = update.effective_chat.first_name
    text = "Â¡Hasta pronto, " + name + "! ðŸ‘‹ðŸ‘‹ðŸ‘‹"
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id, text)
    updater.is_idle = False
    os.kill(os.getpid(), signal.SIGINT)   
    
def help1(update,context):
    logger.info('He recibido un comando help')
    text = "Los comandos vÃ¡lidos son los siguientes: \
    \n\n/start - Inicia el bot. \
    \n\n/mediciones - Regresa las Ãºltimas mediciones de la temperatura y presiÃ³n de los distintos sensores.\
    \n\n/temperatura - Regresa el Ãºltimo valor de temperatura de cada sensor.  \
    \n\n/presion - Regresa el Ãºltimo valor de presiÃ³n del sensor. \
    \n\n/config - Configuraciones del bot.\
    \n\n/help - Regresa la lista de los comandos y su descripciÃ³n. \
    \n\n/kill - Detiene el bot."
    chat_id = update.effective_chat.id
    keyboard(chat_id, text, context)

def mediciones(update,context):
    global r
    logger.info('He recibido un comando mediciones')
    refrescar()
    text= "La Ãºltimas mediciones son: \n \
        \nðŸŒ¡ Temperatura:\n" + d1 + d2 + d3 + d4 + c5 + c6 + ca + cb + "\n \nðŸ’¨ PresiÃ³n: \n" + pf + \
            "\n\nHora de ActualizaciÃ³n {}".format(now)
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton("Refrescar", callback_data='1')]]
    context.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(keyboard))
    r = 1
    
def temperatura(update,context):
    global r
    logger.info('He recibido un comando temperatura')
    refrescar()
    text= "La Ãºltima mediciÃ³n de las temperaturas ðŸŒ¡ es: \n \
    " + d1 + d2 + d3 + d4 + c5 + c6 + ca + cb + \
    "\n\nHora de Ãºltima actualizaciÃ³n {}".format(now)
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton("Refrescar", callback_data='1')]]
    context.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(keyboard))
    r = 2
    
def presion(update,context):
    global r
    logger.info('He recibido un comando presiÃ³n')
    refrescar()
    text= "La Ãºltima mediciÃ³n de la presiÃ³n ðŸ’¨ es: \n" + pf + \
    "\n\nHora de Ãºltima actualizaciÃ³n {}".format(now)
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton("Refrescar", callback_data='1')]]
    context.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(keyboard))
    r = 3
    
def config(update,context):
    logger.info('He recibido un comando config')
    text= "âš™ Â¿QuÃ© deseas configurar? âš™"
    chat_id = update.effective_chat.id
    keyboard = [[InlineKeyboardButton("Cambiar archivo de temperatura para Diodos y Cernox 5 y 6.", callback_data='2')],
                 [InlineKeyboardButton("Cambiar archivo de temperatura para Cernox A y B.", callback_data='3') ],
                 [InlineKeyboardButton("Cambiar archivo de presiÃ³n.", callback_data='4')]]
    context.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(keyboard))
    
def unknown(update,context):
    logger.info('He recibido un comando invÃ¡lido')
    name = update.effective_chat.first_name
    text = "Lo siento, " + name + ".\nEse no es un comando vÃ¡lido. ðŸ˜“" 
    chat_id = update.effective_chat.id
    keyboard(chat_id, text, context)
    
def Options(update,context):
    global door, s
    logger.info('Estoy en Options')
    query = update.callback_query
    query.answer()
    
    choice = query.data
    door = True 
    
    if choice == '2':
        chat_id = update.effective_chat.id
        text = "Ingresa la ruta del archivo, por ejemplo: \
            \n\\home\\Usuario\\Documentos\\ArchivoTemperaturas.txt"
        context.bot.send_message(chat_id, text)
        text = "El archivo que actualmente estoy leyendo es {}".format(a) 
        context.bot.send_message(chat_id, text)
        s=2
    elif choice == '3':
        chat_id = update.effective_chat.id
        text = "Ingresa la ruta del archivo, por ejemplo: \
            \n\\home\\Usuario\\Documentos\\ArchivoTemperaturas.txt."
        context.bot.send_message(chat_id, text)
        text = "El archivo que actualmente estoy leyendo es {}.".format(b) 
        context.bot.send_message(chat_id, text)
        s=3
    elif choice == '4':
        chat_id = update.effective_chat.id
        text = "Ingresa la ruta del archivo, por ejemplo: \
            \n\\home\\Usuario\\Documentos\\ArchivoPresiones.txt"
        context.bot.send_message(chat_id, text)
        text = "El archivo que actualmente estoy leyendo es {}.".format(c)
        context.bot.send_message(chat_id, text)
        s=4
        
    elif choice == '1':
        if r==1:
            mediciones(update,context)
        elif r==2:
            temperatura(update,context)
        elif r==3:
            presion(update,context)

def Text(update,context):
    global a, b, c, door
    logger.info('Ando en Text')
    if door:
        nueva_ruta = update.message.text
        try:
            if s==2:
                a='{}'.format(nueva_ruta)
            elif s==3:
                b='{}'.format(nueva_ruta)
            elif s==4:
                c='{}'.format(nueva_ruta)
            refrescar()
            chat_id = update.effective_chat.id
            text = "La ruta del archivo ha sido actualizada. ðŸ˜Ž"
            context.bot.send_message(chat_id, text)
        except:
            chat_id = update.effective_chat.id
            text = "La ruta del archivo que ingresaste es invÃ¡lida. ðŸ˜•"
            context.bot.send_message(chat_id, text)
        door =  False
    else:
        chat_id = update.effective_chat.id
        name = update.effective_chat.first_name
        text = "Lo siento, " + name + ". ðŸ˜•" + "\nNo entiendo que me quieres decir. \
        revisa la lista de comandos con /help."
        context.bot.send_message(chat_id, text)

if __name__ == '__main__':
    updater = Updater(token=Token, use_context=True)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('kill', stop))
    dispatcher.add_handler(CommandHandler('help', help1))
    dispatcher.add_handler(CommandHandler('mediciones', mediciones))
    dispatcher.add_handler(CommandHandler('temperatura', temperatura))
    dispatcher.add_handler(CommandHandler('presion', presion))
    dispatcher.add_handler(CommandHandler('config', config))
    
    dispatcher.add_handler(MessageHandler(Filters.text, Text))
    dispatcher.add_handler(CallbackQueryHandler(Options))
    
    unknown_handler = MessageHandler(Filters.command, unknown)
    dispatcher.add_handler(unknown_handler)
    
    updater.start_polling()
    updater.idle()    